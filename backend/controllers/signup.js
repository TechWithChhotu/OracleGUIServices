import bcrypt from "bcrypt";
import oracle from "oracledb";

const createUsersTable = async (connection) => {
  const createTableQuery = `
    CREATE TABLE OracleGUIServices (
      id NUMBER GENERATED BY DEFAULT AS IDENTITY,
      email VARCHAR2(50) NOT NULL UNIQUE,
      phone VARCHAR2(50) NOT NULL UNIQUE,
      password VARCHAR2(100) NOT NULL,
      PRIMARY KEY (id)
    )
  `;
  await connection.execute(createTableQuery);
};

const checkAndCreateUsersTable = async (connection) => {
  const result = await connection.execute(
    `SELECT table_name FROM user_tables WHERE table_name = 'OracleGUIServices'`
  );

  if (result.rows.length === 0) {
    await createUsersTable(connection);
  }
};

const signUp = async (req, res) => {
  const { phone, email, password } = req.body;

  let connection;
  try {
    connection = await oracle.getConnection({
      user: process.env.ORACLE_USERNAME,
      password: process.env.ORACLE_PASSWORD,
      connectString: process.env.ORACLE_CONNECTION_STRING,
    });

    // Check and create Users table if it doesn't exist
    // await checkAndCreateUsersTable(connection);

    // Hash the password
    const hashedPassword = await bcrypt.hash(password, 10);

    // Insert the new user
    const insertUserQuery = `INSERT INTO OracleGUIServices (phone,email, password) VALUES (:phone,:email, :password)`;
    await connection.execute(insertUserQuery, [phone, email, hashedPassword]);
    await connection.commit();

    res.status(201).json({ message: "User registered successfully" });
  } catch (error) {
    console.error("Error during sign-up:", error);
    res.status(500).json({ error: "Internal Server Error" });
  } finally {
    if (connection) {
      await connection.close();
    }
  }
};

export default signUp;
